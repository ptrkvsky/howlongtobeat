generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Game {
  id                 Int             @id @default(autoincrement())
  name               String
  description        String
  idHltb             Int             @unique
  totalPoll          Int
  timeMainStory      Int?
  timeMainExtras     Int?
  timeCompletionists Int?
  timeAllStyles      Int?
  cover              String?
  firstReleaseDate   String?
  storyline          String?
  summary            String?
  rating             Int?
  genres             Int[]
  isTranslated       Boolean         @default(false)
  genre              GenresOnGames[]
}

model Genre {
  id     Int             @id @default(autoincrement())
  name   String
  slug   String
  url    String
  idIgdb Int
  games  GenresOnGames[]
}

model GenresOnGames {
  gameId  Int
  genreId Int
  game    Game  @relation(fields: [gameId], references: [id])
  genre   Genre @relation(fields: [genreId], references: [id])

  @@id([gameId, genreId])
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


